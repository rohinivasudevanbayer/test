<?php
namespace Shorturl\Model;

use Application\Model\AbstractTable;
use Auth\Model\User;
use Laminas\Db\Adapter\AdapterInterface;
use Laminas\Db\ResultSet\ResultSetInterface;
use Laminas\Db\Sql\Expression;
use Laminas\Db\Sql\Select;
use Laminas\Db\Sql\Sql;
use Laminas\Db\TableGateway\TableGatewayInterface;

class ShorturlsTable extends AbstractTable
{
    /** @var string TABLENAME The name of the table */
    const TABLENAME = 'su_shorturls';

    /** @var integer FILTER_ALL Filter for all owned and shared shorturls */
    const FILTER_ALL = 3;

    /** @var integer FILTER_MY Filter for all owned shorturls */
    const FILTER_MY = 1;

    /** @var integer FILTER_SHARED Filter for shared shorturls */
    const FILTER_SHARED = 2;

    /** @var integer FILTER_ADMIN Filter for admins (shorturls of all users) */
    const FILTER_ADMIN = 4;

    /** @var string DOMAIN_ALL Value for all domains selection */
    const DOMAIN_ALL = 'all';

    /**
     * Constructor
     *
     * @param TableGatewayInterface $shorturlsTableGateway
     * @param AdapterInterface $dbAdapter
     */
    public function __construct(
        TableGatewayInterface $shorturlsTableGateway,
        AdapterInterface $dbAdapter
    ) {
        parent::__construct($shorturlsTableGateway);
        $this->dbAdapter = $dbAdapter;
    }

    /**
     * Retrieve an active shorturl with the given $domain and $urlCode if existing
     *
     * @param string $shorturl
     * @return Shorturl | null
     */
    public function getActiveShorturl($shorturl): Shorturl
    {
        $rowset = $this->tableGateway->select([
            'short_url' => $shorturl,
            'status' => '1',
        ]);
        $row = $rowset->current();
        return $row;
    }

    /**
     * Fetches a list of my shorturls
     *
     * @param integer $userId
     *            The id of the current user
     * @param integer $domainId
     *            The id of the filtered domain
     * @param integer $offset
     *            The offset of result rows
     * @param integer $limit
     *            The maximum amount of result rows
     * @return ResultSetInterface
     */
    public function getMyShortUrls($userId, $domainId = 0, $offset = 0, $limit = 20): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($userId, $domainId, $offset, $limit) {
            $select->where(['user_id' => $userId]);
            if ($domainId > 0) {
                $select->where(['domain_id' => $domainId]);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
            if ($offset > 0) {
                $select->offset($offset);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
        };
        return $this->tableGateway->select($selectFactory);
    }

    /**
     * Fetches a list of shared shorturls
     *
     * @param integer $userId
     *            The id of the current user
     * @param integer $domainId
     *            The id of the filtered domain
     * @param boolean $includeOwn
     *            The flag if own shorturls should be included
     * @param integer $offset
     *            The offset of result rows
     * @param integer $limit
     *            The maximum amount of result rows
     * @return ResultSetInterface
     */
    public function getSharedShortUrls($userId, $shorturlIds, $domainId = 0, $includeOwn = false, $offset = 0, $limit = 20): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($userId, $shorturlIds, $domainId, $includeOwn, $offset, $limit) {
            if ($includeOwn) {
                if (!empty($shorturlIds)) {
                    $select->where(['id' => $shorturlIds, 'user_id' => $userId], \Laminas\Db\Sql\Predicate\PredicateSet::OP_OR);
                } else {
                    $select->where(['user_id' => $userId]);
                }
            } else {
                $select->where(['id' => $shorturlIds]);
            }
            if ($domainId > 0) {
                $select->where(['domain_id' => $domainId]);
            }
            if ($offset > 0) {
                $select->offset($offset);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
        };
        return $this->tableGateway->select($selectFactory);
    }

    /**
     * Fetches a list of all shorturls
     *
     * @param integer $domainId
     *            The id of the filtered domain
     * @param integer $offset
     *            The offset of result rows
     * @param integer $limit
     *            The maximum amount of result rows
     * @return ResultSetInterface
     */
    public function getAllShortUrls($domainId = 0, $offset = 0, $limit = 20): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($domainId, $offset, $limit) {
            if ($domainId > 0) {
                $select->where(['domain_id' => $domainId]);
            }
            if ($offset > 0) {
                $select->offset($offset);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
        };
        return $this->tableGateway->select($selectFactory);
    }

    /**
     * Fetch all expired shorturls which are expired or will expire within the given weeks for the user with the given id
     *
     * @param integer $userId
     * @param integer $weeksBeforeExpired
     * @return ResultSetInterface
     */
    public function findExpiredShortUrls($userId, $weeksBeforeExpired): ResultSetInterface
    {
        if (empty($userId) || empty($weeksBeforeExpired)) {
            return null;
        }
        $rs = $this->tableGateway->select(function (Select $select) use ($userId, $weeksBeforeExpired) {
            $select->where(['user_id' => $userId])
                ->where("expiry_date - INTERVAL {$weeksBeforeExpired} WEEK <= now()");
        });
        return $rs;
    }

    /**
     * Set the expiry date of all expired and soon to expire (=within given weeksBeforeExpired) shorturls
     *     of a user (with the given userId) to the current date + the given period
     *
     * @param integer $userId
     * @param integer $weeksBeforeExpired
     * @param string $period 1m, 3m, 6m, 1y or 2y
     * @return integer The amount of affected rows
     */
    public function extendExpiredShortUrls($userId, $weeksBeforeExpired, $period): int
    {
        $date = date("Y-m-d");
        switch ($period) {
            case '1m':
                $date = date("Y-m-d", strtotime(' + 30 days'));
                break;
            case '3m':
                $date = date("Y-m-d", strtotime(' + 90 days'));
                break;
            case '6m':
                $date = date("Y-m-d", strtotime(' + 180 days'));
                break;
            case '1y':
                $date = date("Y-m-d", strtotime(' + 365 days'));
                break;
            case '2y':
                $date = date("Y-m-d", strtotime(' + 730 days'));
                break;
            default:
                // do nothing
                break;
        }
        return $this->tableGateway->update(
            array(
                'expiry_date' => $date,
                'sent_reminder1' => 0,
                'sent_reminder2' => 0,
                'sent_expiration_notification' => 0,
                'status' => 1,
            ),
            "expiry_date - INTERVAL {$weeksBeforeExpired} WEEK <= now() AND user_id = {$userId}"
        );
    }

    /**
     * Fetch the top 5 most visited shorturls of the given user
     *
     * @param integer $userId
     * @return ResultSetInterface
     */
    public function getTopShortUrls($userId): ResultSetInterface
    {
        return $this->tableGateway->select(function (Select $select) use ($userId) {
            $select->where(['user_id' => $userId])
                ->order('visits desc')
                ->limit(5);
        });
    }

    /**
     * Count the owned shorturls of the given user
     *
     * @param int $userId
     * @return integer
     */
    public function countOwnShortUrls($userId): int
    {
        $sql = new Sql($this->dbAdapter);
        $select = $sql->select(self::TABLENAME)
            ->columns(['count' => new \Laminas\Db\Sql\Expression('COUNT(*)')])
            ->where(['user_id' => $userId]);

        $selectString = $sql->buildSqlString($select);

        return $this->executeCountQuery($selectString);
    }

    /**
     * Count the inactive shorturls of the given user
     *
     * @param integer $userId
     * @return integer
     */
    public function countOwnInactiveShortUrls($userId): int
    {
        $sql = new Sql($this->dbAdapter);
        $select = $sql->select(self::TABLENAME)
            ->columns(['count' => new \Laminas\Db\Sql\Expression('COUNT(*)')])
            ->where(['user_id' => $userId])
            ->where(['status' => 0]);

        $selectString = $sql->buildSqlString($select);

        return $this->executeCountQuery($selectString);
    }

    /**
     * Count the shorturls which are shared with the given user
     *
     * @param integer $userId
     * @return integer
     */
    public function countSharedShortUrls($userId): int
    {
        $sql = new Sql($this->dbAdapter);
        $select = $sql->select(Shorturls2UsersTable::TABLENAME)
            ->columns(['count' => new \Laminas\Db\Sql\Expression('COUNT(*)')])
            ->where(['user_id' => $userId]);

        $selectString = $sql->buildSqlString($select);

        return $this->executeCountQuery($selectString);
    }

    /**
     * Count the inactive shorturls which are shared with the given user
     *
     * @param integer $userId
     * @return integer
     */
    public function countSharedInactiveShortUrls($userId): int
    {
        $sql = new Sql($this->dbAdapter);
        $select = $sql->select(Shorturls2UsersTable::TABLENAME)
            ->join(self::TABLENAME, Shorturls2UsersTable::TABLENAME . '.shorturl_id = ' . self::TABLENAME . '.id', [])
            ->columns(['count' => new \Laminas\Db\Sql\Expression('COUNT(*)')])
            ->where([Shorturls2UsersTable::TABLENAME . '.user_id' => $userId])
            ->where([self::TABLENAME . '.status' => 0]);

        $selectString = $sql->buildSqlString($select);

        return $this->executeCountQuery($selectString);
    }

    /**
     * Count shorturls which are either owned by or shared with the given user
     *
     * @param integer $userId
     * @return integer
     */
    public function countInactiveShortUrls($userId): int
    {
        return $this->countOwnInactiveShortUrls($userId)
         + $this->countSharedInactiveShortUrls($userId);
    }

    /**
     * Executes the given select query and returns the value of the column 'count'
     *
     * @param string $selectString
     * @return integer
     */
    private function executeCountQuery($selectString): int
    {
        $count = 0;
        $rs = $this->dbAdapter->query($selectString, $this->dbAdapter::QUERY_MODE_EXECUTE);
        if ($rs) {
            $row = $rs->current();
            if (isset($row['count'])) {
                $count = (int) $row['count'];
            }
        }
        return $count;
    }

    public function findByUrlCodeAndDomainId(string $urlCode, int $domainId): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($urlCode, $domainId) {
            $select->where(['url_code' => $urlCode, 'domain_id' => $domainId]);
        };
        return $this->tableGateway->select($selectFactory);
    }
}
