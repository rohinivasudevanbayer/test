<?php
namespace Auth;

use Auth\Controller\AuthController;
use Laminas\Mvc\MvcEvent;
use Shorturl\Controller\RedirectController;

class Module
{
    public function getConfig()
    {
        return include __DIR__ . '/../config/module.config.php';
    }

    public function onBootstrap(MvcEvent $event)
    {
        $eventManager = $event->getApplication()->getEventManager();
        $sharedEventManager = $eventManager->getSharedManager();

        // $sharedEventManager->attach(AbstractActionController::class, MvcEvent::EVENT_DISPATCH, [$this, 'onDispatch'], 100);
    }

    /**
     * Execute the request
     *
     * @param  MvcEvent $e
     * @return mixed
     * @throws Exception\DomainException
     */
    public function onDispatch(MvcEvent $e)
    {
        $controller = $e->getTarget();
        $controller->layout()->showSearch = false;
        $controllerName = $e->getRouteMatch()->getParam('controller', null);

        // TODO: implement spnego, auth, acl

        // $actionName = str_replace('-', '', lcfirst(ucwords($actionName, '-')));
        // $authManager = $e->getApplication()->getServiceManager()->get(AuthManager::class);

        $isLoggedIn = false;

        if ($controllerName !== AuthController::class
            && $controllerName !== RedirectController::class
            && !$isLoggedIn
            // && !$authManager->filterAccess($controllerName, $actionName)
        ) {
            $uri = $e->getApplication()->getRequest()->getUri();
            $uri->setScheme(null)
                ->setHost(null)
                ->setPort(null)
                ->setUserInfo(null);
            $redirectUrl = $uri->toString();

            return $controller->redirect()->toRoute('login', [],
                ['query' => ['redirectUrl' => $redirectUrl]]);
        }

    }
}
