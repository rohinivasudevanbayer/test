<?php
namespace Shorturl\Model;

use Application\Model\AbstractTable;
use Auth\Model\User;
use Laminas\Db\ResultSet\ResultSetInterface;
use Laminas\Db\Sql\Select;
use Laminas\Db\TableGateway\TableGatewayInterface;

class ShorturlsTable extends AbstractTable
{
    const FILTER_ALL = 3;
    const FILTER_MY = 1;
    const FILTER_SHARED = 2;
    const FILTER_ADMIN = 4;

    const DOMAIN_ALL = 'all';

    public function __construct(
        TableGatewayInterface $tableGateway,
        TableGatewayInterface $shorturls2UsersTableGateway,
        TableGatewayInterface $usersTableGateway
    ) {
        parent::__construct($tableGateway);
        $this->_shorturls2UsersTableGateway = $shorturls2UsersTableGateway;
        $this->_usersTableGateway = $usersTableGateway;
    }

    /**
     * Retrieve an active shorturl with the given $domain and $urlCode if existing
     *
     * @param string $shorturl
     * @return Shorturl | null
     */
    public function getActiveShorturl($shorturl): Shorturl
    {
        $rowset = $this->tableGateway->select([
            'short_url' => $shorturl,
            'status' => '1',
        ]);
        $row = $rowset->current();
        return $row;
    }

    /**
     * Fetches a list of my shorturls
     *
     * @param integer $userId
     *            The id of the current user
     * @param integer $domainId
     *            The id of the filtered domain
     * @param integer $offset
     *            The offset of result rows
     * @param integer $limit
     *            The maximum amount of result rows
     * @return ResultSetInterface
     */
    public function getMyShortUrls($userId, $domainId = 0, $offset = 0, $limit = 20): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($userId, $domainId, $offset, $limit) {
            $select->where(['user_id' => $userId]);
            if ($domainId > 0) {
                $select->where(['domain_id' => $domainId]);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
            if ($offset > 0) {
                $select->offset($offset);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
        };
        return $this->tableGateway->select($selectFactory);
    }

    /**
     * Fetches a list of shared shorturls
     *
     * @param integer $userId
     *            The id of the current user
     * @param array $shortUrlIds
     *            A list of shorturl ids
     * @param integer $domainId
     *            The id of the filtered domain
     * @param boolean $includeOwn
     *            The flag if own shorturls should be included
     * @param integer $offset
     *            The offset of result rows
     * @param integer $limit
     *            The maximum amount of result rows
     * @return ResultSetInterface
     */
    public function getSharedShortUrls($userId, $shortUrlIds, $domainId = 0, $includeOwn = false, $offset = 0, $limit = 20): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($userId, $shortUrlIds, $domainId, $includeOwn, $offset, $limit) {
            if ($includeOwn) {
                if (!empty($shortUrlIds)) {
                    $select->where(['id' => $shortUrlIds, 'user_id' => $userId], \Laminas\Db\Sql\Predicate\PredicateSet::OP_OR);
                } else {
                    $select->where(['user_id' => $userId]);
                }
            } else if (!empty($shortUrlIds)) {
                $select->where(['id' => $shortUrlIds]);
            }
            if ($domainId > 0) {
                $select->where(['domain_id' => $domainId]);
            }
            if ($offset > 0) {
                $select->offset($offset);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
        };
        return $this->tableGateway->select($selectFactory);
    }

    /**
     * Fetches a list of all shorturls
     *
     * @param integer $domainId
     *            The id of the filtered domain
     * @param integer $offset
     *            The offset of result rows
     * @param integer $limit
     *            The maximum amount of result rows
     * @return ResultSetInterface
     */
    public function getAllShortUrls($domainId = 0, $offset = 0, $limit = 20): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($userId, $domainId, $offset, $limit) {
            if ($domainId > 0) {
                $select->where(['domain_id' => $domainId]);
            }
            if ($offset > 0) {
                $select->offset($offset);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
        };
        return $this->tableGateway->select($selectFactory);
    }

    /**
     * @param null $where
     * @param null $filter
     * @return null|int
     */
    public function countShortUrls(Auth\Model\User $user, $where = null, $filter = null)
    {
        $user = Model_User::getInstanceLdapUid();

        $shorturls2UsersSql = $this->shorturls2UsersTableGateway->getSql()->select();
        $usersSql = $this->usersTableGateway->getSql()->select();

        if (empty($user->id)) {
            return null;
        }
        $select = $this->select(false)
            ->join('su_url2user', 'su_url2user.url_id = su_shorturl.id', null)
            ->join('su_user', 'su_shorturl.user_id = su_user.id', null);

        if ($user->role !== 'admin' && $user->role !== 'superAdmin') {
            if (empty($filter) || $filter != 3) {
                $select->where('su_url2user.user_id = ?', $user->id);
            }
        } else {
            if (empty($filter)) {
                $select->join('su_user_role', 'su_user_role.resource = su_shorturl.domain', null);
            } elseif ($filter != 3) {
                $select->where('su_url2user.user_id = ?', $user->id);
            }
        }

        if (!empty($where)) {
            if (is_array($where)) {
                $where = implode(' AND ', $where);
            }
            $select->where($where);
        }

        return (int) $this->getDefaultAdapter()->fetchOne($select);
    }
}
