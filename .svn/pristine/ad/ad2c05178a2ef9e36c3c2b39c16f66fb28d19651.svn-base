<?php
namespace Shorturl\Controller;

use Laminas\Authentication\AuthenticationService;
use Laminas\Mvc\Controller\AbstractActionController;
use Laminas\View\Model\ViewModel;
use Shorturl\Model\Admins2DomainsTable;
use Shorturl\Model\DomainsTable;
use Shorturl\Model\Shorturls2UsersTable;
use Shorturl\Model\ShorturlsTable;

class ShorturlController extends AbstractActionController
{
    private $table;

    private $authService;

    private $filters = [ShorturlsTable::FILTER_ALL => 'All', ShorturlsTable::FILTER_MY => 'Only my Urls', ShorturlsTable::FILTER_SHARED => 'Only Shared Urls'];

    public function __construct(Admins2DomainsTable $admins2ShorturlsTable, ShorturlsTable $shorturlsTable, Shorturls2UsersTable $shorturls2UsersTable, DomainsTable $domainsTable, AuthenticationService $authService)
    {
        $this->admins2ShorturlsTable = $admins2ShorturlsTable;
        $this->shorturlsTable = $shorturlsTable;
        $this->shorturls2UsersTable = $shorturls2UsersTable;
        $this->domainsTable = $domainsTable;
        $this->authService = $authService;
        $this->user = $this->authService->getIdentity();
    }

    public function indexAction()
    {
        $this->layout()->showSearch = true;

        $queryParams = $this->getRequest()->getQuery();
        $queryParams['order'] = $queryParams['order'] === "desc" ? "asc" : "desc";

        if (empty($queryParams['domain'])) {
            $queryParams['domain'] = ShorturlsTable::DOMAIN_ALL;
        };
        $domainId = 0;
        if (!empty($queryParams['domain'])) {
            $domainId = $this->domainsTable->getIdByDomain($queryParams['domain']);
        }

        $userIsAdmin = false;
        if ($this->user->isSuperAdmin()) {
            $userIsAdmin = true;
        } else if ($domainId !== 0 && $this->user->isAdmin()) {
            if ($this->admins2ShorturlsTable->isAdminForDomain($this->user->id, $domainId)) {
                $userIsAdmin = true;
            }
        }
        if ($userIsAdmin) {
            $this->filters[ShorturlsTable::FILTER_ADMIN] = 'Admin';
        }

        if (empty($queryParams['filter']) || !array_key_exists($queryParams['filter'], $this->filters)) {
            $queryParams['filter'] = ShorturlsTable::FILTER_MY;
        };
        if (empty($queryParams['offset'])) {
            $queryParams['offset'] = 0;
        };

        $shorturlsSets = [];
        switch ($queryParams['filter']) {
            case ShorturlsTable::FILTER_ALL:
                $shorturlIds = $this->shorturls2UsersTable->getShortUrlIdsByUser($this->user->id);
                $shorturlsSets[] = $this->shorturlsTable->getSharedShortUrls($this->user->id, $shorturlIds, $domainId, true, $queryParams['offset']);
                break;
            case ShorturlsTable::FILTER_SHARED:
                $shorturlIds = $this->shorturls2UsersTable->getShortUrlIdsByUser($this->user->id);
                $shorturlsSets[] = $this->shorturlsTable->getSharedShortUrls($this->user->id, $shorturlIds, $domainId, false, $queryParams['offset']);
                break;
            case ShorturlsTable::FILTER_ADMIN:
                if ($userIsAdmin) {
                    $shorturlsSets[] = $this->shorturlsTable->getAllShortUrls($domainId, $queryParams['offset']);
                    break;
                }
            default:
                $shorturlsSets[] = $this->shorturlsTable->getMyShortUrls($this->user->id, $domainId, $queryParams['offset']);
                break;
        }
        $shorturls = [];
        foreach ($shorturlsSets as $set) {
            foreach ($set as $row) {
                $row->showFurtherActions = false;
                if ($this->user->superadmin == 1) {
                    $row->showFurtherActions = true;
                } else if ($this->user->admin == 1) {
                    // TODO: Check user domains

                } else if ($this->user->id == $row->user_id) {
                    $row->showFurtherActions = true;
                }
                // TODO: Check for shared urls
                $shorturls[] = $row;
            }
        }

        return new ViewModel([
            'shorturls' => $shorturls,
            'queryParams' => $queryParams,
            'domainParam' => $queryParams['domain'],
            'filterParam' => $queryParams['filter'],
            'domains' => $this->domainsTable->fetchAll(),
            'filters' => $this->filters,
        ]);
    }
}
