<?php
namespace Shorturl\Model;

use Application\Model\AbstractTable;
use Auth\Model\User;
use Laminas\Db\ResultSet\ResultSetInterface;
use Laminas\Db\Sql\Select;

class ShorturlsTable extends AbstractTable
{
    const FILTER_ALL = 3;
    const FILTER_MY = 1;
    const FILTER_SHARED = 2;

    const DOMAIN_ALL = 'all';

    /**
     * Retrieve an active shorturl with the given $domain and $urlCode if existing
     *
     * @param string $shorturl
     * @return Shorturl | null
     */
    public function getActiveShorturl($shorturl): Shorturl
    {
        $rowset = $this->tableGateway->select([
            'short_url' => $shorturl,
            'status' => '1',
        ]);
        $row = $rowset->current();
        return $row;
    }

    /**
     * Fetches a list of my shorturls
     *
     * @param integer $userId
     *            The id of the current user
     * @param integer $domainId
     *            The id of the filtered domain
     * @param integer $offset
     *            The offset of result rows
     * @param integer $limit
     *            The maximum amount of result rows
     * @return ResultSetInterface
     */
    public function getMyShortUrls($userId, $domainId = 0, $offset = 0, $limit = 20): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($userId, $domainId, $offset, $limit) {
            $select->where(['user_id' => $userId]);
            if ($domainId > 0) {
                $select->where(['domain_id' => $domainId]);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
            if ($offset > 0) {
                $select->offset($offset);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
        };
        return $this->tableGateway->select($selectFactory);
    }

    /**
     * Fetches a list of shared shorturls
     *
     * @param integer $userId
     *            The id of the current user
     * @param integer $domainId
     *            The id of the filtered domain
     * @param integer $offset
     *            The offset of result rows
     * @param integer $limit
     *            The maximum amount of result rows
     * @return ResultSetInterface
     */
    public function getSharedShortUrls($userId, $domainId = 0, $offset = 0, $limit = 20): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($userId, $domainId, $offset, $limit) {
            $select->join('su_shorturls2users', 'su_shorturls.id = su_shorturls2users.shorturl_id');
            $select->where(['su_shorturls2users.user_id' => $userId]);
            if ($domainId > 0) {
                $select->where(['domain_id' => $domainId]);
            }
            if ($offset > 0) {
                $select->offset($offset);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
        };
        return $this->tableGateway->select($selectFactory);
    }

    /**
     * Fetches a list of all shorturls
     *
     * @param integer $domainId
     *            The id of the filtered domain
     * @param integer $offset
     *            The offset of result rows
     * @param integer $limit
     *            The maximum amount of result rows
     * @return ResultSetInterface
     */
    public function getAllShortUrls($domainId = 0, $offset = 0, $limit = 20): ResultSetInterface
    {
        $selectFactory = function (Select $select) use ($userId, $domainId, $offset, $limit) {
            if ($domainId > 0) {
                $select->where(['domain_id' => $domainId]);
            }
            if ($offset > 0) {
                $select->offset($offset);
            }
            if ($limit > 0) {
                $select->limit($limit);
            }
        };
        return $this->tableGateway->select($selectFactory);
    }
}
